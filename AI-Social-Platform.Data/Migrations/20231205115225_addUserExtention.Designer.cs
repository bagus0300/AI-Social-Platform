// <auto-generated />
using System;
using AI_Social_Platform.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AI_Social_Platform.Data.Migrations
{
    [DbContext(typeof(ASPDbContext))]
    [Migration("20231205115225_addUserExtention")]
    partial class addUserExtention
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AI_Social_Platform.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<byte[]>("CoverPhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasDefaultValue("Test");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasDefaultValue("Test");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("Relationship")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StateId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d5800ce-d726-4fc8-83d9-d6b3ac1f591e"),
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2005, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "58b3ec20-920d-4c5e-88cf-aeaa5a359064",
                            CountryId = 1,
                            CoverPhoto = new byte[] { 114, 87, 185, 193, 103, 147, 57, 147, 87, 153, 128, 79, 135, 14, 171, 12, 114, 208, 9, 225, 22, 7, 13, 42, 80, 144, 195, 162, 153, 85, 43, 111, 61, 136, 62, 92, 238, 42, 95, 174, 56, 236, 107, 101, 182, 219, 44, 119, 59, 173, 175, 57, 223, 37, 84, 86, 250, 113, 255, 39, 133, 230, 41, 14, 82, 38, 67, 23, 122, 23, 62, 93, 44, 17, 2, 232, 69, 88, 168, 95, 13, 176, 25, 67, 251, 151, 125, 49, 159, 151, 167, 216, 45, 90, 252, 159, 221, 228, 133, 6, 3, 242, 151, 161, 51, 212, 86, 212, 79, 49, 47, 210, 161, 150, 7, 227, 149, 184, 204, 225, 87, 120, 195, 178, 253, 48, 101, 6, 157, 212, 106, 5, 115, 207, 122, 33, 237, 254, 162, 235, 23, 17, 38, 129, 107, 40, 216, 17, 199, 128, 34, 153, 179, 190, 148, 220, 16, 40, 255, 26, 64, 45, 111, 207, 120, 40, 151, 207, 147, 120, 154, 93, 170, 181, 68, 202, 109, 132, 49, 175, 40, 194, 58, 238, 156, 6, 209, 158, 135, 73, 217, 248, 203, 120, 241, 144, 224, 184, 58, 97, 234, 233, 88, 59, 254, 99, 198, 16, 20, 41, 235, 220, 0, 230, 219, 241, 19, 75, 211, 179, 182, 178, 31, 143, 214, 20, 1, 57, 102, 3, 13, 59, 52, 160, 70, 25, 174, 137, 77, 161, 203, 100, 248, 99, 165, 91, 95, 254, 32, 23, 25, 61, 74, 195, 32, 120, 223, 97, 112, 31, 235, 120, 39, 140, 207, 84, 41, 37, 155, 156, 222, 155, 99, 48, 113, 247, 181, 50, 201, 155, 77, 22, 68, 13, 153, 234, 68, 64, 219, 130, 40, 184, 160, 139, 228, 180, 144, 93, 188, 163, 254, 75, 171, 205, 202, 90, 122, 205, 157, 212, 43, 104, 12, 103, 185, 105, 8, 105, 78, 102, 193, 31, 226, 110, 32, 30, 116, 134, 212, 71, 192, 22, 20, 156, 45, 168, 8, 1, 33, 196, 111, 193, 246, 144, 64, 56, 131, 102, 148, 160, 221, 196, 158, 115, 92, 205, 104, 52, 51, 41, 241, 160, 144, 96, 91, 193, 55, 103, 218, 51, 116, 87, 94, 72, 99, 16, 95, 56, 227, 166, 60, 100, 67, 184, 117, 238, 118, 28, 128, 90, 102, 207, 241, 115, 19, 230, 240, 16, 35, 31, 224, 142, 85, 17, 74, 22, 130, 153, 15, 215, 110, 229, 215, 190, 199, 49, 246, 94, 190, 9, 60, 9, 94, 41, 255, 11, 186, 152, 175, 48, 168, 62, 190, 214, 61, 174, 51, 31, 251, 33, 167, 139, 116, 85, 187, 0, 17, 138, 250, 111, 13, 59, 59, 231, 186, 207, 83, 80, 199, 113, 125, 231, 23, 177, 6, 217, 102, 139, 105, 246, 96, 42, 90, 234, 139, 77, 210, 55, 68, 18, 161, 4, 198, 132, 41, 56, 189, 34, 33, 90, 61, 43, 250, 35, 141, 196, 174, 106, 129, 183, 252, 183, 51, 152, 88, 124, 90, 111, 52, 123, 208, 151, 40, 148, 225, 131, 121, 125, 248, 162, 153, 27, 115, 243, 48, 13, 34, 165, 10, 236, 70, 42, 174, 190, 95, 252, 61, 24, 127, 205, 244, 172, 145, 72, 72, 56, 19, 217, 149, 237, 209, 215, 146, 182, 13, 118, 51, 221, 224, 127, 88, 120, 254, 197, 170, 221, 151, 254, 96, 187, 220, 162, 37, 35, 0, 213, 46, 101, 202, 165, 77, 204, 117, 90, 141, 86, 24, 245, 20, 82, 23, 242, 38, 219, 163, 203, 152, 163, 212, 159, 111, 163, 140, 82, 238, 115, 105, 159, 88, 244, 102, 2, 183, 247, 171, 44, 169, 108, 126, 83, 236, 139, 60, 155, 108, 135, 225, 97, 240, 94, 213, 117, 117, 24, 142, 140, 212, 168, 10, 231, 25, 151, 122, 77, 178, 186, 35, 142, 114, 113, 171, 211, 247, 203, 152, 30, 110, 230, 186, 190, 17, 48, 206, 137, 215, 236, 4, 204, 82, 178, 93, 169, 151, 102, 102, 198, 247, 97, 69, 37, 99, 32, 180, 14, 76, 194, 38, 254, 230, 96, 64, 241, 0, 101, 161, 229, 86, 141, 111, 22, 137, 237, 171, 201, 215, 197, 236, 194, 43, 127, 38, 132, 29, 38, 213, 226, 156, 246, 66, 49, 132, 142, 178, 104, 77, 214, 118, 233, 119, 18, 232, 143, 73, 209, 10, 94, 66, 14, 92, 247, 40, 206, 159, 6, 183, 123, 110, 17, 4, 235, 177, 41, 32, 34, 40, 180, 37, 136, 222, 51, 90, 174, 120, 84, 85, 98, 27, 64, 159, 26, 94, 90, 107, 100, 104, 6, 226, 201, 94, 237, 187, 119, 55, 101, 9, 47, 24, 204, 107, 112, 129, 5, 99, 49, 237, 6, 110, 192, 143, 21, 138, 22, 227, 4, 222, 15, 168, 94, 161, 178, 39, 11, 220, 149, 221, 217, 51, 224, 255, 115, 7, 56, 95, 109, 206, 168, 78, 205, 231, 15, 79, 231, 123, 106, 100, 152, 5, 181, 45, 223, 216, 14, 139, 141, 34, 210, 27, 33, 235, 68, 239, 80, 30, 254, 244, 116, 3, 238, 217, 230, 215, 14, 159, 186, 50, 197, 153, 143, 107, 43, 19, 169, 83, 44, 90, 16, 19, 128, 215, 7, 207, 236, 198, 162, 9, 45, 152, 42, 182, 176, 13, 242, 87, 158, 117, 251, 247, 127, 169, 220, 134, 29, 179, 62, 126, 185, 185, 218, 172, 196, 252, 255, 132, 101, 235, 13, 46, 217, 186, 183, 58, 99, 121, 139, 88, 160, 83, 80, 166, 120, 105, 183, 194, 37, 38, 0, 248, 58, 143, 140, 249, 241, 174, 205, 41, 73, 240, 184, 65, 188, 97, 74, 36, 2, 103, 9, 91, 134, 101, 109, 217, 0, 232, 73, 89, 180, 12, 96, 43, 97, 239, 44, 201, 249, 236, 254, 152, 7, 186, 78, 19, 11, 25, 39, 74, 203, 243, 224, 163, 94, 69, 92, 143, 54, 214, 210, 50, 149, 118, 65, 161, 220, 65, 128, 245, 150, 210, 238, 52, 245, 53, 70, 168, 242, 49, 106, 7, 161, 206, 155, 30, 191, 107, 150, 113, 49, 151, 192, 249, 185, 147, 95, 249, 121, 171, 114, 108, 125, 21, 171, 36, 161, 228, 113, 136, 46, 163, 222, 17, 148, 216, 28, 70, 52, 231, 10, 134, 125, 37, 230, 77, 229, 100, 28, 179, 252, 250, 242, 100, 162, 67, 166, 154, 184, 12, 45, 248, 57, 148, 186, 196, 186, 2, 133, 99, 37, 229, 114, 43, 196, 67, 64, 144, 180, 160, 200, 185, 54, 6, 26, 79, 53, 83, 251, 95, 11, 181, 27, 25, 235, 189, 52, 152, 121, 86, 193, 35, 69, 96, 238, 23, 29, 231, 46, 184, 79, 213, 34, 96, 126, 42, 86, 27, 189, 126, 142, 234, 1, 55, 194, 11, 86, 158, 105, 47, 158, 178, 220, 98, 222, 32, 166, 232, 31, 116, 167, 215, 197, 24, 68, 164, 47, 89, 32, 53, 136, 158, 224, 29, 73, 120, 65, 34, 70, 161, 239, 30, 153, 178, 156, 205, 114, 94, 237, 127, 202, 173, 93, 3, 238, 41, 75, 121, 234, 238, 1, 219, 190, 253, 216, 155, 175, 89, 197, 186, 168, 106, 84, 104, 162, 202, 129, 170, 23, 176, 237, 184, 109, 81, 199, 34, 214, 94, 132, 90, 152, 101, 166, 134, 89, 227, 35, 125, 124, 73, 121, 176, 103, 220, 211, 253, 94, 101, 245, 47, 237, 248, 94, 76, 41, 149, 72, 59, 224, 164, 227, 27, 159, 158, 24, 142, 78, 238, 200, 48, 119, 9, 235, 37, 127, 123, 71, 50, 115, 253, 189, 69, 68, 77, 197, 150, 33, 34, 20, 240, 134, 80, 124, 174, 165, 234, 59, 24, 15, 117, 161, 187, 242, 54, 191, 252, 21, 40, 96, 48, 119, 77, 70, 141, 104, 209, 253, 115, 94, 98, 130, 206, 182, 85, 253, 118, 181, 185, 49, 210, 207, 124, 74, 149, 130, 112, 215, 92, 204, 143, 73, 191, 106, 173, 174, 124, 78, 74, 101, 124, 6, 119, 71, 107, 195, 158, 233, 132, 57, 82, 90, 204, 32, 175, 146, 191, 221, 61, 203, 138, 162, 27, 52, 167, 218, 81, 39, 183, 176, 189, 110, 78, 54, 196, 206, 125, 149, 112, 253, 238, 81, 176, 100, 150, 109, 52, 19, 47, 121, 238, 51, 78, 81, 243, 237, 227, 58, 131, 65, 183, 105, 140, 225, 213, 69, 208, 163, 226, 85, 208, 176, 29, 48, 61, 138, 32, 204, 42, 180, 19, 87, 51, 42, 173, 41, 164, 111, 200, 163, 170, 153, 18, 135, 206, 13, 36, 5, 230, 203, 209, 141, 2, 6, 16, 77, 52, 115, 211, 250, 37, 238, 41, 78, 116, 39, 122, 87, 213, 21, 79, 141, 219, 205, 29, 21, 124, 155, 114, 34, 191, 83, 238, 126, 67, 54, 12, 176, 228, 81, 238, 76, 91, 144, 180, 56, 63, 36, 226, 12, 149, 110, 253, 168, 83, 151, 56, 34, 191, 114, 193, 214, 124, 65, 228, 5, 249, 142, 178, 88, 237, 18, 175, 81, 65, 1, 118, 66, 165, 79, 253, 97, 242, 244, 135, 216, 136, 106, 40, 94, 193, 188, 112, 250, 53, 237, 72, 105, 28, 178, 59, 113, 96, 55, 162, 102, 3, 203, 171, 211, 122, 73, 62, 71, 135, 24, 184, 248, 183, 31, 251, 36, 34, 52, 133, 188, 221, 166, 50, 66, 120, 83, 9, 236, 88, 129, 37, 148, 135, 48, 159, 16, 131, 145, 94, 162, 29, 181, 142, 213, 245, 39, 121, 62, 63, 32, 218, 74, 150, 33, 194, 152, 76, 31, 56, 19, 211, 162, 165, 163, 74, 86, 226, 139, 238, 165, 62, 5, 230, 87, 116, 69, 182, 157, 235, 166, 5, 44, 111, 133, 165, 25, 154, 233, 26, 111, 50, 38, 91, 173, 214, 21, 234, 29, 232, 43, 7, 168, 77, 55, 230, 37, 154, 251, 225, 189, 82, 99, 126, 0, 181, 183, 67, 114, 205, 23, 52, 252, 80, 28, 166, 69, 163, 104, 183, 204, 132, 140, 68, 121, 244, 51, 112, 73, 209, 186, 211, 128, 15, 47, 29, 114, 97, 246, 125, 255, 34, 138, 30, 226, 13, 61, 185, 40, 154, 61, 86, 221, 47, 110, 65, 158, 159, 29, 7, 12, 171, 95, 196, 250, 49, 196, 170, 101, 230, 239, 192, 239, 235, 145, 39, 62, 130, 36, 156, 124, 71, 222, 144, 214, 61, 167, 38, 32, 70, 11, 31, 208, 55, 79, 253, 79, 190, 13, 73, 81, 210, 134, 156, 169, 72, 16, 93, 226, 43, 30, 56, 191, 14, 36, 87, 181, 116, 172, 248, 139, 194, 32, 138, 194, 225, 25, 26, 221, 173, 249, 233, 239, 178, 200, 249, 215, 243, 248, 198, 248, 17, 129, 31, 222, 116, 58, 57, 99, 211, 161, 249, 159, 45, 159, 149, 9, 83, 73, 186, 185, 122, 157, 235, 54, 245, 25, 223, 39, 70, 194, 41, 179, 255, 115, 77, 168, 214, 119, 202, 211, 250, 99, 139, 61, 27, 94, 105, 55, 172, 71, 13, 174, 159, 48, 174, 31, 177, 175, 182, 85, 124, 101, 46, 63, 195, 225, 134, 114, 105, 31, 214, 214, 149, 149, 197, 103, 167, 19, 119, 246, 93, 143, 155, 64, 153, 202, 41, 25, 207, 196, 107, 93, 240, 181, 68, 152, 202, 0, 242, 89, 231, 73, 33, 224, 192, 163, 34, 51, 84, 133, 192, 98, 104, 212, 121, 230, 94, 108, 25, 235, 148, 72, 0, 172, 127, 238, 58, 35, 223, 161, 145, 104, 22, 186, 123, 78, 138, 78, 100, 255, 48, 215, 10, 77, 175, 196, 107, 204, 191, 135, 192, 94, 36, 206, 193, 179, 88, 64, 208, 163, 111, 53, 165, 178, 62, 169, 86, 33, 56, 196, 238, 127, 171, 96, 235, 86, 102, 60, 113, 139, 57, 3, 91, 95, 82, 32, 210, 11, 33, 78, 100, 89, 56, 24, 73, 158, 151, 46, 129, 51, 251, 107, 89, 88, 46, 114, 57, 214, 112, 112, 139, 113, 204, 20, 159, 161, 30, 245, 80, 12, 219, 220, 47, 140, 58, 219, 166, 70, 21, 29, 37, 64, 123, 144, 116, 63, 62, 90, 225, 202, 248, 99, 79, 186, 170, 28, 204, 15 },
                            Email = "user@user.com",
                            EmailConfirmed = false,
                            FirstName = "Georgi",
                            Gender = 0,
                            IsActive = false,
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            NormalizedEmail = "user@user.com",
                            NormalizedUserName = "USER@USER.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEHytWSMn6+6sthZrkIy+vX+9vK/UhyjEtjzmYjvBOEfSGz3WSza59cqoLy+SMEGS9g==",
                            PhoneNumber = "0888555666",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = new byte[] { 77, 77, 218, 230, 169, 6, 139, 147, 162, 121, 81, 231, 28, 202, 141, 132, 89, 147, 181, 156, 62, 34, 94, 226, 182, 164, 99, 26, 58, 223, 216, 76, 46, 217, 122, 99, 98, 167, 12, 227, 135, 188, 184, 155, 178, 33, 5, 185, 190, 196, 36, 253, 73, 103, 84, 144, 193, 130, 144, 170, 126, 178, 248, 104, 227, 193, 167, 187, 31, 194, 249, 104, 87, 229, 77, 129, 94, 181, 187, 95, 236, 34, 106, 8, 151, 79, 38, 191, 254, 192, 68, 33, 129, 63, 18, 232, 63, 207, 205, 208, 167, 150, 180, 130, 250, 60, 147, 205, 159, 239, 231, 78, 113, 97, 75, 230, 29, 41, 239, 107, 207, 163, 224, 124, 55, 80, 154, 219, 160, 60, 44, 31, 178, 65, 106, 128, 49, 99, 30, 168, 57, 165, 77, 160, 83, 54, 236, 210, 226, 248, 204, 76, 87, 185, 246, 159, 117, 94, 24, 120, 81, 242, 126, 148, 107, 13, 137, 54, 100, 16, 68, 44, 217, 82, 121, 224, 92, 28, 96, 241, 15, 167, 204, 156, 208, 60, 194, 154, 125, 119, 66, 81, 32, 219, 49, 109, 63, 67, 161, 111, 232, 157, 255, 240, 29, 6, 131, 208, 3, 52, 86, 233, 201, 16, 155, 219, 247, 2, 177, 33, 19, 44, 191, 209, 237, 28, 222, 244, 191, 63, 15, 206, 243, 191, 179, 29, 243, 89, 135, 87, 251, 247, 179, 178, 164, 111, 168, 92, 164, 69, 47, 255, 6, 245, 59, 18, 100, 53, 93, 224, 145, 151, 106, 220, 164, 9, 205, 123, 195, 72, 68, 68, 253, 41, 157, 129, 196, 128, 139, 210, 148, 174, 141, 54, 109, 41, 97, 218, 148, 70, 115, 13, 119, 199, 186, 8, 91, 196, 119, 142, 174, 205, 126, 179, 10, 86, 179, 25, 113, 231, 154, 159, 34, 253, 167, 107, 65, 243, 51, 165, 109, 66, 171, 252, 174, 241, 181, 12, 138, 43, 63, 59, 72, 158, 148, 36, 42, 31, 140, 88, 96, 191, 2, 27, 83, 184, 207, 164, 14, 113, 143, 142, 222, 86, 199, 159, 199, 190, 237, 169, 154, 230, 20, 83, 117, 121, 98, 254, 141, 179, 191, 134, 167, 172, 2, 145, 10, 30, 74, 223, 108, 150, 244, 199, 36, 200, 234, 90, 182, 75, 26, 54, 114, 205, 231, 85, 116, 69, 205, 180, 252, 179, 147, 52, 152, 27, 204, 244, 175, 165, 163, 150, 254, 98, 74, 17, 7, 245, 212, 172, 50, 91, 213, 29, 195, 55, 50, 195, 226, 61, 87, 200, 55, 164, 204, 127, 144, 62, 142, 217, 21, 167, 11, 29, 31, 163, 57, 144, 33, 155, 41, 242, 3, 74, 83, 25, 87, 183, 73, 136, 194, 127, 62, 93, 103, 98, 226, 28, 18, 119, 35, 37, 153, 201, 66, 251, 79, 78, 206, 231, 79, 110, 228, 119, 105, 147, 141, 176, 51, 127, 168, 64, 145, 255, 165, 125, 37, 239, 67, 125, 65, 158, 190, 234, 71, 53, 187, 2, 59, 133, 209, 50, 45, 148, 154, 106, 113, 78, 119, 182, 95, 221, 30, 194, 217, 52, 12, 133, 210, 54, 184, 100, 253, 117, 240, 98, 131, 242, 174, 191, 15, 163, 87, 59, 38, 242, 58, 228, 156, 37, 103, 152, 54, 81, 20, 23, 226, 192, 66, 239, 201, 28, 90, 164, 23, 179, 32, 42, 37, 168, 200, 168, 73, 10, 159, 166, 226, 109, 241, 102, 5, 133, 62, 158, 38, 209, 15, 234, 0, 123, 116, 232, 131, 138, 162, 145, 18, 109, 225, 160, 66, 127, 24, 103, 118, 77, 121, 16, 222, 168, 53, 33, 151, 124, 78, 101, 238, 119, 12, 118, 101, 26, 111, 241, 66, 70, 141, 139, 175, 173, 44, 181, 32, 41, 26, 52, 49, 157, 209, 183, 8, 61, 4, 26, 97, 195, 220, 220, 47, 24, 83, 80, 36, 45, 59, 121, 172, 170, 86, 217, 71, 144, 120, 70, 16, 214, 72, 126, 114, 198, 61, 38, 50, 160, 136, 4, 177, 100, 10, 3, 157, 151, 251, 110, 98, 7, 178, 197, 89, 213, 9, 247, 217, 130, 98, 154, 235, 19, 237, 114, 66, 66, 113, 208, 31, 134, 159, 80, 104, 28, 12, 90, 181, 132, 70, 154, 150, 214, 105, 220, 120, 67, 132, 233, 248, 192, 80, 118, 83, 246, 79, 66, 221, 253, 143, 19, 122, 118, 203, 102, 145, 62, 213, 37, 237, 146, 161, 125, 241, 162, 210, 5, 177, 174, 42, 134, 92, 209, 77, 178, 44, 172, 213, 174, 8, 127, 38, 240, 234, 82, 0, 18, 101, 81, 19, 134, 65, 42, 123, 130, 10, 99, 247, 158, 112, 158, 95, 101, 198, 11, 68, 89, 14, 166, 13, 210, 99, 163, 75, 49, 35, 144, 44, 107, 31, 38, 78, 173, 147, 65, 61, 106, 61, 88, 133, 122, 233, 139, 142, 6, 49, 174, 92, 128, 39, 233, 19, 205, 103, 247, 69, 4, 113, 107, 46, 7, 199, 194, 59, 165, 205, 140, 178, 221, 250, 215, 151, 128, 207, 12, 228, 15, 136, 105, 149, 195, 88, 89, 0, 246, 72, 113, 209, 54, 240, 60, 98, 46, 105, 117, 33, 117, 222, 113, 140, 35, 80, 56, 218, 134, 90, 151, 8, 152, 198, 36, 124, 188, 175, 234, 122, 24, 43, 78, 225, 195, 243, 109, 37, 82, 211, 138, 229, 97, 97, 44, 153, 85, 186, 174, 157, 177, 136, 10, 165, 242, 10, 206, 40, 159, 103, 24, 214, 126, 69, 131, 187, 52, 203, 6, 27, 123, 243, 163, 4, 83, 180, 105, 190, 4, 132, 212, 198, 116, 54, 74, 58, 174, 178, 134, 179, 167, 100, 240, 194, 125, 103, 13, 197, 74, 221, 53, 98, 70, 37, 169, 233, 221, 75, 152, 57, 189, 4, 74, 84, 47, 198, 117, 230, 16, 57, 119, 53, 241, 199, 72, 230, 251, 240, 26, 22, 109, 203, 174, 242, 229, 56, 39, 168, 115, 247, 175, 199, 66, 112, 109, 90, 174, 88, 177, 43, 103, 193, 52, 108, 183, 172, 197, 228, 223, 45, 204, 17, 205 },
                            Relationship = 1,
                            SecurityStamp = "48c6b99f-5b7f-4c43-97a0-e9dda96a610b",
                            StateId = 1,
                            TwoFactorEnabled = false,
                            UserName = "user@user.com"
                        },
                        new
                        {
                            Id = new Guid("949a14ed-2e82-4f5a-a684-a9c7e3ccb52e"),
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2007, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "24252721-5ca6-4ab9-b924-3201772dd612",
                            CountryId = 1,
                            CoverPhoto = new byte[] { 9, 130, 47, 245, 207, 43, 111, 116, 133, 249, 26, 50, 36, 218, 71, 43, 49, 194, 247, 252, 31, 55, 14, 100, 255, 73, 177, 193, 34, 170, 152, 29, 78, 131, 56, 12, 110, 138, 195, 98, 215, 160, 58, 188, 212, 60, 43, 17, 102, 93, 89, 30, 85, 178, 7, 50, 123, 164, 121, 49, 106, 22, 246, 59, 213, 80, 150, 22, 0, 27, 101, 162, 145, 187, 30, 196, 200, 250, 77, 205, 206, 102, 119, 35, 14, 164, 107, 237, 40, 145, 181, 26, 116, 176, 206, 235, 162, 46, 120, 83, 47, 141, 80, 53, 153, 66, 51, 246, 102, 133, 24, 209, 204, 238, 127, 8, 53, 202, 53, 35, 107, 12, 207, 46, 187, 202, 70, 202, 37, 177, 235, 229, 70, 180, 87, 139, 166, 159, 47, 113, 99, 89, 167, 75, 245, 144, 74, 12, 246, 238, 187, 66, 169, 15, 107, 191, 239, 98, 219, 252, 121, 131, 214, 242, 54, 180, 223, 189, 17, 127, 89, 14, 181, 247, 179, 10, 196, 224, 223, 27, 87, 67, 193, 102, 125, 89, 69, 79, 155, 70, 95, 117, 190, 154, 155, 14, 165, 13, 151, 251, 200, 208, 254, 131, 53, 104, 154, 30, 50, 166, 230, 176, 119, 173, 254, 35, 21, 157, 215, 26, 127, 88, 8, 26, 95, 56, 87, 116, 223, 241, 1, 157, 93, 79, 61, 65, 60, 223, 157, 27, 7, 19, 110, 141, 89, 37, 49, 72, 222, 10, 27, 57, 233, 31, 208, 129, 8, 62, 69, 2, 173, 57, 48, 150, 80, 91, 145, 89, 110, 31, 135, 79, 65, 82, 150, 99, 155, 253, 200, 154, 18, 84, 125, 7, 153, 49, 191, 129, 177, 34, 66, 247, 103, 249, 137, 14, 131, 32, 68, 52, 192, 61, 218, 4, 81, 131, 3, 166, 82, 123, 77, 154, 101, 166, 71, 138, 119, 250, 108, 35, 85, 50, 242, 99, 60, 65, 74, 41, 0, 16, 166, 115, 147, 78, 70, 136, 104, 144, 7, 41, 225, 110, 134, 225, 231, 80, 178, 93, 208, 86, 67, 33, 84, 55, 165, 131, 9, 239, 148, 39, 205, 58, 74, 171, 199, 58, 155, 223, 180, 229, 38, 112, 108, 179, 83, 97, 194, 154, 190, 93, 212, 36, 7, 48, 40, 107, 241, 163, 231, 227, 112, 178, 199, 80, 13, 255, 203, 26, 60, 7, 245, 140, 202, 56, 231, 202, 53, 208, 178, 140, 158, 159, 224, 124, 41, 127, 37, 231, 192, 68, 29, 80, 70, 193, 77, 122, 154, 251, 213, 214, 40, 102, 83, 12, 180, 105, 222, 5, 174, 71, 118, 46, 228, 159, 166, 230, 152, 4, 100, 242, 53, 25, 217, 153, 21, 48, 144, 36, 255, 105, 226, 84, 49, 15, 190, 196, 147, 139, 253, 86, 181, 239, 156, 62, 2, 252, 84, 247, 184, 107, 196, 110, 20, 134, 9, 84, 94, 193, 30, 62, 88, 213, 237, 134, 164, 54, 253, 126, 9, 211, 127, 112, 146, 52, 179, 240, 4, 96, 242, 202, 25, 33, 244, 168, 211, 58, 135, 252, 239, 207, 22, 142, 16, 249, 227, 18, 183, 164, 171, 198, 220, 69, 116, 102, 46, 233, 225, 51, 249, 61, 88, 6, 49, 104, 192, 84, 152, 92, 127, 228, 88, 177, 9, 162, 14, 182, 82, 47, 128, 154, 120, 250, 206, 220, 236, 151, 210, 179, 89, 123, 75, 139, 201, 16, 219, 79, 193, 108, 250, 86, 153, 62, 247, 13, 82, 173, 24, 235, 161, 137, 9, 169, 134, 159, 20, 240, 15, 61, 216, 105, 100, 63, 198, 170, 79, 153, 81, 65, 235, 130, 169, 195, 230, 178, 24, 146, 180, 209, 203, 7, 105, 219, 9, 249, 218, 91, 242, 208, 221, 224, 212, 100, 63, 216, 106, 177, 235, 245, 211, 247, 70, 163, 80, 190, 124, 24, 164, 122, 61, 69, 20, 251, 231, 171, 247, 117, 84, 122, 241, 22, 130, 189, 220, 216, 64, 71, 102, 61, 196, 57, 182, 90, 184, 238, 63, 86, 232, 221, 104, 94, 110, 247, 42, 209, 239, 143, 75, 181, 254, 178, 222, 223, 118, 136, 173, 126, 206, 127, 36, 69, 249, 85, 245, 132, 77, 157, 213, 141, 33, 101, 57, 71, 5, 80, 187, 82, 139, 223, 74, 63, 206, 246, 26, 159, 19, 246, 86, 85, 64, 254, 99, 65, 110, 239, 27, 137, 140, 246, 106, 205, 71, 86, 214, 76, 30, 229, 120, 208, 166, 205, 117, 214, 118, 131, 189, 70, 220, 108, 246, 67, 236, 23, 11, 74, 73, 128, 197, 199, 254, 168, 112, 175, 130, 44, 249, 223, 190, 142, 48, 129, 210, 88, 94, 130, 128, 61, 172, 63, 245, 104, 106, 19, 145, 231, 189, 251, 52, 12, 194, 110, 73, 171, 17, 132, 16, 162, 163, 242, 5, 69, 20, 250, 37, 161, 242, 114, 165, 1, 90, 170, 26, 137, 84, 152, 53, 212, 28, 1, 196, 243, 84, 31, 73, 181, 42, 95, 72, 172, 247, 158, 90, 46, 217, 248, 228, 230, 160, 164, 180, 139, 155, 196, 8, 101, 12, 245, 145, 89, 71, 191, 13, 208, 168, 174, 101, 138, 32, 46, 130, 124, 80, 109, 122, 44, 145, 124, 167, 244, 20, 0, 72, 0, 9, 196, 20, 202, 71, 12, 176, 248, 170, 38, 52, 175, 195, 140, 58, 132, 241, 57, 201, 217, 72, 82, 39, 227, 100, 160, 42, 164, 246, 177, 173, 34, 194, 43, 39, 100, 68, 3, 14, 224, 35, 233, 150, 223, 120, 244, 35, 59, 106, 40, 226, 131, 131, 6, 41, 83, 22, 209, 191, 120, 70, 232, 64, 102, 125, 213, 200, 205, 101, 144, 111, 38, 19, 26, 161, 122, 62, 107, 231, 75, 98, 102, 136, 161, 222, 195, 87, 136, 145, 68, 238, 158, 59, 68, 164, 244, 39, 195, 87, 105, 64, 146, 178, 223, 97, 57, 252, 9, 188, 138, 3, 61, 119, 114, 172, 237, 100, 231, 197, 83, 108, 162, 82, 135, 70, 30, 20, 5, 251, 150, 22, 179, 77, 41, 84, 167, 20, 239, 165, 150, 14, 116, 248, 101, 245, 132, 90, 50, 188, 89, 134, 43, 168, 211, 49, 105, 247, 19, 1, 163, 135, 219, 80, 59, 54, 121, 26, 113, 230, 210, 134, 139, 90, 221, 235, 88, 231, 236, 222, 39, 242, 33, 4, 117, 26, 212, 20, 15, 140, 134, 69, 194, 240, 27, 191, 33, 65, 71, 249, 50, 46, 135, 184, 248, 106, 234, 37, 192, 163, 214, 113, 28, 213, 184, 244, 7, 245, 91, 119, 29, 158, 205, 214, 198, 145, 13, 2, 27, 237, 84, 159, 130, 22, 40, 213, 117, 162, 220, 207, 250, 192, 250, 91, 99, 14, 106, 69, 62, 112, 199, 22, 185, 45, 15, 252, 9, 194, 29, 191, 49, 14, 231, 134, 220, 107, 46, 42, 122, 237, 161, 172, 37, 19, 214, 74, 22, 75, 215, 85, 161, 204, 158, 236, 135, 100, 63, 221, 254, 159, 137, 166, 211, 188, 89, 153, 143, 200, 150, 65, 83, 155, 156, 226, 106, 8, 162, 62, 68, 132, 67, 64, 156, 165, 154, 30, 134, 24, 123, 209, 221, 95, 208, 101, 240, 28, 236, 254, 202, 254, 145, 249, 11, 188, 137, 62, 6, 3, 156, 116, 118, 96, 111, 79, 80, 242, 9, 189, 196, 67, 8, 5, 24, 3, 36, 140, 46, 134, 142, 214, 60, 174, 98, 183, 113, 119, 250, 24, 8, 164, 134, 200, 80, 150, 87, 51, 255, 229, 156, 94, 32, 111, 250, 251, 135, 20, 27, 92, 143, 90, 151, 5, 160, 56, 52, 80, 207, 209, 30, 200, 93, 73, 180, 114, 148, 38, 140, 162, 238, 111, 221, 62, 189, 33, 153, 204, 73, 247, 214, 224, 164, 201, 49, 176, 183, 78, 202, 132, 198, 51, 189, 3, 225, 252, 49, 5, 1, 148, 120, 6, 123, 86, 142, 199, 29, 159, 205, 223, 3, 159, 147, 68, 89, 217, 42, 211, 115, 104, 144, 140, 58, 96, 161, 32, 199, 23, 255, 87, 169, 46, 212, 88, 160, 113, 90, 174, 98, 59, 97, 136, 193, 118, 254, 96, 90, 157, 0, 111, 190, 115, 187, 143, 200, 252, 85, 119, 10, 173, 184, 80, 138, 221, 246, 2, 67, 185, 51, 4, 202, 125, 204, 112, 182, 130, 11, 230, 125, 22, 9, 53, 197, 244, 67, 154, 219, 152, 248, 83, 48, 199, 42, 185, 46, 75, 112, 25, 255, 39, 112, 150, 243, 34, 65, 247, 223, 220, 25, 187, 195, 40, 183, 101, 134, 240, 165, 76, 161, 193, 29, 65, 173, 70, 118, 12, 76, 115, 21, 26, 223, 245, 236, 228, 132, 174, 34, 92, 38, 81, 89, 43, 124, 45, 101, 98, 34, 42, 132, 96, 249, 212, 122, 152, 23, 20, 207, 62, 120, 25, 94, 31, 25, 50, 199, 43, 173, 24, 224, 182, 190, 14, 70, 245, 235, 95, 121, 153, 201, 98, 39, 188, 168, 104, 255, 190, 222, 255, 244, 18, 94, 128, 204, 137, 96, 94, 16, 54, 45, 221, 121, 227, 134, 107, 184, 152, 189, 249, 185, 119, 194, 162, 61, 216, 132, 121, 93, 135, 193, 147, 38, 106, 108, 51, 248, 219, 193, 138, 87, 146, 112, 199, 110, 13, 67, 129, 208, 48, 42, 84, 186, 237, 185, 245, 242, 175, 213, 189, 64, 5, 177, 230, 13, 252, 147, 167, 1, 152, 121, 190, 171, 116, 91, 59, 144, 37, 197, 183, 0, 191, 80, 232, 143, 55, 80, 31, 21, 0, 201, 5, 210, 179, 251, 239, 85, 45, 70, 141, 116, 116, 13, 177, 223, 86, 133, 104, 211, 147, 126, 135, 26, 97, 59, 43, 245, 5, 253, 219, 112, 193, 15, 8, 72, 85, 171, 131, 190, 246, 157, 18, 63, 205, 190, 65, 1, 149, 193, 132, 252, 250, 63, 32, 30, 174, 120, 27, 0, 68, 225, 236, 154, 10, 35, 38, 64, 45, 68, 159, 113, 127, 140, 121, 18, 1, 136, 176, 172, 102, 141, 144, 193, 89, 52, 31, 61, 254, 31, 235, 225, 186, 101, 183, 181, 178, 162, 126, 105, 147, 57, 81, 109, 132, 181, 33, 228, 70, 10, 91, 173, 38, 76, 216, 9, 67, 59, 252, 218, 171, 215, 88, 178, 32, 25, 135, 93, 196, 153, 34, 85, 211, 75, 65, 156, 143, 221, 46, 140, 105, 93, 169, 121, 135, 153, 204, 164, 198, 108, 167, 114, 164, 12, 35, 246, 22, 61, 82, 38, 164, 132, 58, 67, 45, 117, 7, 13, 174, 237, 165, 130, 235, 193, 47, 109, 26, 122, 53, 239, 208, 70, 179, 10, 195, 233, 88, 140, 18, 26, 246, 175, 251, 231, 212, 128, 181, 7, 142, 102, 65, 110, 255, 39, 174, 113, 163, 167, 214, 136, 50, 251, 120, 14, 11, 35, 183, 223, 127, 30, 169, 229, 51, 108, 128, 44, 213, 162, 131, 216, 53, 30, 22, 44, 36, 184, 174, 130, 8, 146, 119, 154, 88, 122, 214, 83, 179, 247, 222, 89, 118, 29, 52, 27, 43, 10, 0, 146, 89, 12, 79, 115, 156, 72, 130, 234, 228, 40, 150, 232, 216, 117, 184, 168, 3, 148, 204, 121, 17, 233, 221, 137, 107, 40, 193, 179, 109, 143, 192, 55, 91, 76, 8, 238, 169, 47, 69, 29, 46, 22, 228, 149, 167, 37, 196, 106, 235, 193, 152, 190, 50, 120, 23, 27, 201, 61, 82, 244, 111, 179, 215, 242, 194, 0, 153, 105, 117, 194, 245, 57, 117, 119, 176, 212, 110, 32, 193, 32, 197, 42, 244, 3, 162, 182, 241, 77, 158, 246, 85, 102, 123, 164, 93, 119, 120, 186, 147, 155, 10, 84, 177, 176, 245, 76, 2, 157, 106, 58, 140, 152, 198, 180, 183, 181, 243, 247, 159, 215, 238, 174, 148, 200, 32, 55, 141, 25, 69, 196, 153, 41, 255, 252, 141, 126, 214, 129, 131, 180, 110, 102, 247, 219, 231, 236, 70, 130, 46, 166, 147, 89, 21, 61, 73, 242, 86, 46, 61, 198, 110, 245, 68, 89, 208, 47, 58, 146, 214, 137, 183, 206, 143, 157, 208, 25, 98, 237, 239, 146, 226, 146, 59, 233, 178, 197, 30, 174, 204, 151, 34, 40, 254, 52 },
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            Gender = 0,
                            IsActive = false,
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.com",
                            NormalizedUserName = "ADMIN@ADMIN.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEFaOZ0adCyj8fmQDQ6OV0EcIkkjknRPzPmRNkFoBC3EUr8/L0aJmhMJKTPrV3HsMMA==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = new byte[] { 221, 237, 52, 143, 174, 180, 219, 48, 245, 27, 249, 70, 67, 52, 103, 182, 55, 134, 101, 252, 33, 234, 178, 248, 21, 151, 123, 92, 184, 169, 110, 155, 209, 221, 111, 224, 165, 255, 79, 190, 241, 221, 190, 85, 173, 20, 176, 114, 80, 176, 124, 201, 154, 129, 32, 75, 97, 207, 174, 176, 178, 8, 204, 144, 44, 103, 204, 101, 126, 101, 120, 220, 91, 85, 10, 148, 85, 206, 77, 127, 120, 131, 178, 188, 197, 9, 53, 232, 15, 147, 57, 41, 83, 91, 48, 191, 24, 150, 27, 148, 233, 64, 27, 189, 3, 62, 250, 128, 182, 122, 31, 113, 56, 251, 166, 167, 65, 60, 117, 106, 157, 55, 202, 193, 157, 211, 9, 69, 105, 54, 117, 192, 42, 200, 222, 10, 24, 67, 62, 208, 158, 148, 37, 188, 116, 124, 187, 220, 217, 18, 254, 59, 89, 94, 180, 129, 213, 249, 85, 231, 169, 25, 20, 116, 144, 211, 53, 113, 102, 80, 253, 174, 247, 89, 82, 51, 108, 215, 78, 211, 126, 18, 28, 125, 40, 173, 180, 60, 193, 226, 44, 39, 177, 165, 227, 232, 243, 30, 249, 157, 167, 85, 62, 175, 55, 95, 65, 46, 49, 3, 141, 207, 122, 125, 186, 17, 103, 22, 84, 16, 108, 41, 109, 221, 178, 59, 85, 8, 159, 118, 123, 198, 222, 214, 220, 140, 42, 207, 148, 138, 228, 225, 30, 123, 173, 144, 238, 134, 142, 68, 17, 101, 148, 138, 243, 219, 201, 143, 136, 66, 172, 133, 177, 164, 41, 76, 66, 201, 227, 68, 219, 175, 0, 30, 213, 123, 77, 38, 198, 158, 215, 43, 23, 46, 155, 19, 13, 148, 238, 244, 139, 103, 233, 15, 165, 78, 15, 216, 136, 71, 167, 89, 61, 58, 147, 216, 139, 89, 28, 201, 88, 225, 36, 124, 252, 253, 18, 88, 111, 87, 228, 245, 171, 143, 180, 198, 166, 193, 240, 76, 1, 219, 44, 88, 77, 187, 138, 97, 25, 114, 245, 239, 20, 177, 139, 25, 233, 229, 64, 252, 117, 32, 69, 66, 220, 97, 127, 161, 39, 57, 29, 118, 62, 169, 201, 192, 98, 130, 89, 117, 167, 60, 13, 187, 143, 58, 61, 146, 195, 22, 190, 107, 136, 113, 227, 84, 142, 98, 63, 221, 50, 206, 241, 11, 62, 119, 2, 103, 56, 144, 213, 75, 176, 116, 217, 181, 235, 202, 217, 122, 221, 207, 236, 74, 189, 57, 138, 42, 215, 62, 232, 89, 93, 30, 44, 243, 253, 102, 144, 69, 163, 20, 245, 194, 93, 113, 200, 249, 53, 89, 232, 181, 90, 35, 95, 169, 51, 157, 223, 249, 61, 204, 113, 233, 60, 208, 221, 10, 94, 77, 39, 140, 15, 118, 79, 125, 188, 54, 20, 61, 243, 68, 5, 190, 254, 6, 252, 32, 151, 26, 36, 76, 34, 35, 175, 167, 27, 149, 66, 181, 95, 105, 125, 46, 118, 198, 9, 183, 33, 86, 163, 216, 208, 203, 226, 78, 109, 147, 89, 64, 179, 241, 85, 65, 49, 121, 150, 115, 172, 107, 240, 94, 142, 117, 56, 253, 8, 175, 6, 173, 38, 103, 44, 49, 199, 242, 124, 188, 209, 164, 37, 175, 198, 120, 244, 254, 41, 102, 32, 158, 160, 161, 157, 41, 9, 231, 140, 152, 82, 234, 221, 9, 19, 165, 208, 67, 110, 46, 229, 46, 14, 154, 39, 50, 179, 88, 71, 89, 34, 121, 183, 20, 116, 233, 92, 217, 6, 216, 159, 122, 117, 220, 184, 162, 188, 136, 212, 129, 245, 131, 215, 34, 144, 36, 225, 71, 242, 129, 205, 215, 181, 155, 39, 47, 109, 127, 13, 219, 87, 47, 202, 104, 78, 57, 0, 160, 8, 67, 102, 73, 202, 7, 142, 35, 236, 106, 204, 102, 41, 206, 75, 205, 11, 34, 225, 2, 237, 74, 254, 219, 30, 64, 212, 59, 39, 163, 9, 150, 35, 232, 3, 226, 160, 148, 136, 45, 231, 87, 57, 103, 53, 61, 178, 74, 138, 113, 140, 40, 1, 53, 71, 243, 67, 210, 210, 95, 203, 37, 179, 226, 85, 81, 87, 79, 13, 30, 185, 55, 254, 125, 60, 245, 210, 20, 234, 60, 20, 183, 142, 200, 194, 104, 164, 176, 58, 227, 27, 94, 81, 76, 41, 4, 47, 242, 16, 117, 240, 220, 91, 108, 217, 240, 55, 52, 72, 123, 31, 95, 225, 239, 213, 245, 74, 200, 42, 250, 60, 118, 4, 206, 174, 35, 113, 209, 74, 86, 137, 237, 134, 177, 79, 12, 38, 97, 83, 163, 237, 167, 172, 25, 196, 39, 211, 15, 143, 218, 175, 152, 11, 252, 129, 149, 166, 86, 251, 223, 22, 229, 130, 212, 242, 4, 233, 49, 69, 213, 114, 17, 201, 62, 127, 76, 248, 57, 38, 17, 245, 46, 89, 55, 25, 182, 64, 51, 242, 74, 108, 3, 13, 154, 58, 157, 53, 232, 201, 230, 151, 246, 23, 60, 116, 16, 230, 117, 223, 63, 129, 21, 226, 173, 19, 9, 131, 91, 122, 74, 106, 131, 185, 148, 113, 234, 77, 62, 17, 110, 201, 90, 96, 7, 17, 143, 172, 129, 254, 219, 158, 181, 96, 67, 76, 191, 165, 66, 23, 109, 134, 237, 69, 166, 121, 36, 96, 208, 94, 51, 165, 167, 39, 46, 67, 113, 78, 85, 215, 1, 17, 21, 43, 54, 214, 207, 50, 145, 21, 22, 117, 250, 95, 7, 98, 187, 182, 119, 240, 182, 26, 252, 210, 105, 226, 170, 78, 148, 14, 234, 20, 129, 230, 104, 144, 219, 247, 159, 138, 33, 19, 219, 71, 99, 61, 236, 82, 146, 171, 255, 74, 20, 120, 40, 77, 0, 219, 253, 35, 72, 182, 124, 238, 172, 81, 63, 143, 129, 32, 194, 68, 8, 85, 203, 164, 234, 159, 200, 18, 91, 8, 186, 175, 146, 152, 109, 74, 130, 68, 95, 49, 240, 204, 248, 99, 23, 186, 101, 130, 78, 183, 205, 179, 69, 243, 127, 68, 39, 180, 159, 178, 105, 43, 95, 24, 28, 104, 90, 157, 163, 155, 218, 128, 179, 223, 205, 178, 130 },
                            Relationship = 0,
                            SecurityStamp = "f40419fe-fda4-4226-87b1-2b836c9a20c3",
                            StateId = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "BULGARIA"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ENGLAND"
                        },
                        new
                        {
                            Id = 3,
                            Name = "USA"
                        },
                        new
                        {
                            Id = 4,
                            Name = "RUSSIA"
                        },
                        new
                        {
                            Id = 5,
                            Name = "JAPAN"
                        });
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("DataFile")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PublicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.HasIndex("UserId");

                    b.ToTable("MediaFiles");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Publication.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PublicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Publication.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PublicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Publication.Publication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastCommented")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LatestActivity")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Publications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8994b68d-55d2-405e-8dce-66461406196d"),
                            AuthorId = new Guid("949a14ed-2e82-4f5a-a684-a9c7e3ccb52e"),
                            Content = "This is the first seeded publication Content from Ivan",
                            DateCreated = new DateTime(2023, 12, 5, 11, 52, 24, 829, DateTimeKind.Utc).AddTicks(2587),
                            LatestActivity = new DateTime(2023, 12, 5, 11, 52, 24, 829, DateTimeKind.Utc).AddTicks(2593)
                        },
                        new
                        {
                            Id = new Guid("359de674-41e6-4eb1-b8bb-860c318b867b"),
                            AuthorId = new Guid("6d5800ce-d726-4fc8-83d9-d6b3ac1f591e"),
                            Content = "This is the second seeded publication Content from Georgi",
                            DateCreated = new DateTime(2023, 12, 5, 11, 52, 24, 829, DateTimeKind.Utc).AddTicks(2618),
                            LatestActivity = new DateTime(2023, 12, 5, 11, 52, 24, 829, DateTimeKind.Utc).AddTicks(2618)
                        });
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Publication.Share", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PublicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.HasIndex("UserId");

                    b.ToTable("Shares");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ivan Vazov",
                            StateId = 1
                        });
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Varna"
                        });
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.UserSchool", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SchoolId");

                    b.HasIndex("SchoolId");

                    b.ToTable("UserSchools");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", null)
                        .WithMany("Friends")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("AI_Social_Platform.Data.Models.Country", "Country")
                        .WithMany("UsersInThisCountry")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AI_Social_Platform.Data.Models.State", "State")
                        .WithMany("UsersInThisState")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Media", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.Publication.Publication", "Publication")
                        .WithMany("MediaFiles")
                        .HasForeignKey("PublicationId");

                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publication");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Publication.Comment", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.Publication.Publication", "Publication")
                        .WithMany("Comments")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Publication");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Publication.Like", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.Publication.Publication", "Publication")
                        .WithMany("Likes")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Publication");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Publication.Publication", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", "Author")
                        .WithMany("Publications")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Publication.Share", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.Publication.Publication", "Publication")
                        .WithMany("Shares")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", "User")
                        .WithMany("Shares")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Publication");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.School", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.UserSchool", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.School", "School")
                        .WithMany("UserSchools")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", "User")
                        .WithMany("UserSchools")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Friends");

                    b.Navigation("Likes");

                    b.Navigation("Publications");

                    b.Navigation("Shares");

                    b.Navigation("UserSchools");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Country", b =>
                {
                    b.Navigation("UsersInThisCountry");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Publication.Publication", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("MediaFiles");

                    b.Navigation("Shares");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.School", b =>
                {
                    b.Navigation("UserSchools");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.State", b =>
                {
                    b.Navigation("UsersInThisState");
                });
#pragma warning restore 612, 618
        }
    }
}
