// <auto-generated />
using System;
using AI_Social_Platform.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AI_Social_Platform.Data.Migrations
{
    [DbContext(typeof(ASPDbContext))]
    [Migration("20231206091102_setNullForCountryAndState")]
    partial class setNullForCountryAndState
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AI_Social_Platform.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<byte[]>("CoverPhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasDefaultValue("Test");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasDefaultValue("Test");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("Relationship")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StateId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d5800ce-d726-4fc8-83d9-d6b3ac1f591e"),
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2005, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "ef38cf8a-c85f-4c3f-8479-d2c13337d6e8",
                            CountryId = 1,
                            CoverPhoto = new byte[] { 227, 215, 24, 250, 102, 59, 231, 69, 237, 100, 236, 180, 164, 156, 33, 119, 193, 145, 233, 231, 111, 183, 236, 151, 249, 252, 56, 207, 49, 121, 37, 113, 118, 233, 105, 22, 237, 108, 124, 53, 83, 10, 72, 171, 85, 57, 155, 182, 106, 6, 47, 163, 74, 220, 177, 235, 196, 224, 205, 226, 15, 127, 187, 35, 23, 247, 84, 9, 112, 88, 149, 115, 124, 218, 253, 120, 141, 59, 145, 70, 189, 66, 238, 201, 85, 164, 45, 108, 109, 185, 27, 159, 44, 62, 49, 193, 42, 202, 0, 169, 205, 141, 237, 65, 48, 232, 110, 137, 147, 152, 252, 172, 127, 213, 128, 231, 29, 222, 48, 146, 131, 226, 33, 90, 228, 26, 219, 181, 173, 168, 214, 178, 219, 97, 170, 209, 163, 75, 193, 10, 99, 124, 227, 170, 224, 240, 132, 174, 35, 161, 157, 13, 16, 68, 127, 219, 226, 210, 139, 152, 218, 69, 222, 192, 192, 63, 51, 23, 183, 71, 78, 251, 75, 169, 101, 158, 42, 136, 5, 237, 58, 103, 233, 35, 233, 244, 238, 99, 5, 61, 73, 69, 105, 63, 189, 254, 122, 54, 135, 239, 158, 200, 243, 166, 34, 212, 104, 143, 165, 203, 107, 157, 84, 121, 243, 74, 7, 206, 92, 138, 71, 223, 209, 115, 57, 114, 44, 62, 233, 18, 58, 150, 110, 107, 169, 141, 75, 150, 189, 237, 153, 91, 65, 111, 170, 201, 199, 97, 101, 205, 64, 12, 85, 235, 180, 12, 33, 56, 128, 67, 69, 254, 248, 103, 111, 52, 100, 194, 160, 170, 36, 154, 141, 147, 52, 194, 113, 200, 50, 250, 157, 165, 60, 122, 237, 186, 49, 177, 191, 31, 20, 219, 21, 68, 221, 85, 126, 218, 95, 79, 184, 53, 0, 33, 255, 102, 28, 167, 28, 42, 2, 148, 183, 120, 214, 26, 184, 90, 230, 11, 43, 23, 81, 66, 175, 30, 21, 104, 170, 224, 15, 110, 3, 210, 95, 64, 211, 226, 250, 103, 130, 221, 37, 19, 184, 85, 89, 28, 216, 86, 77, 146, 130, 176, 228, 7, 227, 231, 133, 173, 109, 162, 232, 86, 5, 90, 45, 129, 92, 22, 208, 130, 67, 63, 103, 3, 140, 27, 59, 232, 88, 56, 229, 194, 208, 193, 227, 191, 52, 122, 126, 102, 213, 229, 149, 207, 215, 155, 76, 219, 37, 26, 27, 193, 1, 222, 198, 142, 226, 209, 20, 232, 80, 178, 129, 217, 39, 126, 89, 239, 235, 86, 54, 114, 229, 140, 154, 83, 6, 132, 160, 162, 40, 142, 41, 69, 157, 112, 226, 162, 176, 230, 131, 96, 186, 7, 236, 148, 102, 185, 227, 206, 53, 82, 239, 58, 147, 200, 158, 72, 192, 54, 122, 196, 234, 86, 214, 108, 135, 212, 187, 89, 6, 227, 187, 127, 13, 198, 148, 236, 191, 38, 250, 60, 141, 19, 178, 75, 228, 164, 53, 178, 38, 147, 83, 205, 11, 171, 93, 3, 39, 21, 226, 75, 182, 13, 176, 210, 225, 95, 173, 203, 111, 233, 228, 31, 246, 7, 50, 165, 226, 59, 102, 140, 29, 70, 15, 213, 170, 139, 253, 207, 195, 72, 121, 15, 88, 114, 100, 195, 253, 236, 106, 137, 7, 103, 178, 197, 75, 241, 193, 228, 112, 140, 44, 192, 221, 79, 14, 71, 223, 85, 32, 4, 102, 200, 189, 5, 86, 96, 8, 254, 28, 122, 125, 1, 242, 193, 172, 254, 215, 138, 245, 21, 168, 224, 62, 51, 59, 128, 7, 131, 72, 88, 118, 88, 216, 229, 124, 127, 62, 211, 154, 217, 123, 189, 59, 75, 28, 81, 29, 180, 192, 129, 15, 127, 192, 158, 77, 191, 4, 184, 93, 254, 196, 78, 165, 247, 103, 205, 177, 62, 237, 121, 168, 231, 191, 118, 148, 178, 68, 22, 209, 127, 179, 125, 58, 199, 148, 188, 185, 88, 99, 245, 35, 179, 253, 16, 231, 129, 137, 23, 88, 9, 151, 192, 137, 135, 121, 11, 216, 202, 43, 6, 122, 150, 158, 200, 250, 61, 207, 252, 130, 80, 132, 75, 53, 20, 11, 82, 140, 136, 182, 29, 225, 67, 146, 22, 230, 124, 121, 226, 56, 53, 253, 123, 238, 203, 43, 221, 211, 133, 109, 106, 127, 84, 1, 104, 75, 172, 160, 136, 194, 130, 13, 190, 69, 50, 51, 16, 68, 192, 116, 197, 230, 191, 84, 176, 41, 45, 236, 77, 147, 97, 88, 71, 94, 235, 2, 103, 175, 68, 178, 221, 21, 193, 81, 2, 164, 32, 225, 153, 231, 128, 69, 228, 212, 44, 163, 216, 186, 46, 198, 102, 199, 145, 76, 8, 50, 217, 160, 165, 174, 158, 42, 237, 81, 231, 137, 2, 3, 205, 2, 6, 53, 26, 12, 26, 74, 13, 223, 60, 186, 74, 119, 94, 132, 92, 14, 20, 220, 176, 40, 240, 115, 232, 119, 251, 113, 247, 17, 227, 159, 227, 170, 193, 134, 139, 8, 167, 208, 250, 209, 210, 140, 82, 28, 202, 218, 104, 61, 246, 49, 230, 64, 35, 141, 76, 36, 201, 59, 64, 82, 56, 8, 104, 152, 255, 113, 216, 130, 183, 107, 201, 147, 78, 73, 79, 118, 4, 87, 209, 126, 59, 72, 72, 209, 245, 49, 157, 155, 208, 45, 138, 91, 31, 67, 167, 149, 83, 99, 29, 188, 51, 38, 105, 221, 213, 61, 4, 202, 48, 188, 190, 131, 246, 174, 241, 141, 251, 76, 249, 122, 146, 249, 235, 200, 226, 34, 24, 204, 64, 186, 117, 6, 97, 124, 88, 52, 239, 44, 25, 28, 162, 178, 218, 124, 94, 7, 71, 47, 215, 145, 21, 23, 164, 71, 134, 132, 73, 92, 229, 180, 88, 175, 235, 96, 6, 249, 81, 64, 98, 222, 137, 81, 202, 191, 67, 210, 203, 244, 42, 95, 48, 102, 200, 90, 178, 64, 73, 191, 8, 66, 126, 72, 249, 33, 227, 10, 228, 57, 32, 181, 87, 6, 203, 151, 28, 105, 71, 48, 89, 34, 132, 13, 196, 120, 79, 149, 50, 111, 168, 248, 42, 185, 170, 252, 2, 138, 60, 51, 133, 85, 7, 22, 112, 26, 59, 153, 141, 54, 82, 66, 99, 161, 244, 91, 28, 158, 106, 113, 252, 153, 100, 7, 159, 125, 116, 19, 99, 218, 175, 189, 123, 255, 60, 2, 72, 93, 83, 3, 159, 100, 97, 177, 89, 189, 50, 32, 229, 123, 65, 174, 57, 78, 161, 89, 2, 166, 23, 44, 117, 149, 184, 200, 13, 179, 118, 155, 48, 145, 8, 120, 219, 99, 86, 8, 2, 52, 171, 118, 231, 128, 246, 150, 218, 175, 1, 77, 84, 182, 95, 230, 143, 200, 180, 53, 109, 39, 244, 83, 86, 171, 179, 110, 172, 155, 85, 196, 24, 116, 26, 255, 27, 119, 235, 38, 49, 125, 5, 175, 190, 176, 96, 45, 194, 219, 16, 167, 139, 190, 41, 102, 196, 120, 168, 182, 202, 215, 253, 27, 238, 49, 116, 243, 183, 245, 102, 65, 246, 237, 147, 68, 181, 63, 203, 51, 233, 104, 209, 65, 237, 207, 107, 13, 32, 218, 39, 35, 156, 113, 52, 179, 185, 220, 33, 50, 93, 221, 42, 151, 55, 188, 18, 239, 173, 208, 127, 185, 201, 217, 47, 213, 197, 71, 180, 85, 196, 163, 152, 16, 61, 148, 98, 71, 246, 221, 202, 243, 143, 51, 90, 177, 203, 250, 187, 181, 164, 216, 61, 187, 199, 65, 190, 133, 33, 79, 171, 148, 149, 170, 69, 160, 184, 175, 25, 92, 44, 125, 78, 178, 14, 225, 61, 190, 117, 83, 34, 69, 157, 197, 73, 179, 88, 6, 42, 53, 19, 211, 198, 21, 109, 237, 229, 98, 225, 25, 218, 19, 236, 206, 16, 173, 208, 161, 184, 227, 91, 187, 74, 15, 125, 34, 107, 108, 167, 103, 78, 247, 95, 183, 61, 247, 7, 116, 218, 25, 33, 82, 240, 78, 53, 200, 28, 28, 66, 70, 154, 86, 109, 26, 242, 185, 141, 41, 131, 212, 9, 239, 0, 249, 182, 8, 79, 33, 56, 119, 188, 126, 65, 156, 139, 213, 171, 81, 140, 38, 170, 102, 8, 60, 127, 252, 122, 177, 65, 1, 76, 55, 33, 86, 1, 141, 125, 113, 27, 139, 65, 8, 88, 178, 169, 202, 23, 32, 107, 98, 42, 76, 203, 110, 165, 188, 250, 120, 151, 7, 85, 187, 4, 201, 190, 69, 82, 55, 104, 87, 49, 80, 140, 114, 154, 144, 172, 165, 244, 53, 196, 134, 51, 136, 84, 96, 102, 95, 242, 85, 163, 142, 99, 21, 7, 208, 187, 22, 176, 116, 234, 187, 199, 240, 199, 233, 240, 119, 186, 203, 80, 122, 203, 195, 94, 205, 186, 216, 59, 110, 14, 59, 195, 27, 109, 174, 8, 57, 56, 159, 142, 45, 158, 12, 250, 142, 50, 199, 120, 10, 19, 135, 43, 56, 77, 1, 129, 176, 100, 68, 54, 125, 236, 84, 194, 200, 4, 238, 126, 8, 9, 30, 8, 53, 143, 56, 0, 23, 236, 100, 38, 122, 224, 172, 88, 75, 2, 232, 42, 141, 181, 80, 132, 26, 107, 95, 176, 53, 203, 134, 176, 47, 84, 245, 178, 241, 144, 57, 198, 26, 190, 80, 61, 154, 91, 245, 38, 229, 15, 253, 214, 114, 55, 254, 123, 208, 70, 126, 40, 128, 17, 64, 95, 57, 237, 80, 25, 108, 40, 68, 57, 152, 116, 154, 45, 187, 111, 127, 127, 124, 105, 239, 5, 187, 5, 244, 37, 145, 18, 31, 180, 58, 33, 239, 141, 194, 80, 104, 51, 31, 67, 200, 225, 249, 56, 46, 138, 83, 29, 148, 175, 241, 216, 125, 44, 207, 231, 132, 88, 96, 81, 42, 247, 16, 38, 15, 93, 224, 138, 121, 243, 29, 162, 207, 42, 202, 111, 246, 109, 70, 229, 176, 64, 107, 239, 170, 232, 112, 16, 161, 242, 88, 48, 213, 70, 252, 242, 88, 196, 20, 35, 168, 89, 236, 108, 207, 128, 144, 166, 96, 101, 4, 231, 84, 157, 60, 153, 62, 243, 26, 175, 225, 179, 17, 187, 135, 148, 130, 169, 9, 101, 249, 229, 19, 39, 168, 154, 192, 41, 94, 231, 31, 172, 199, 65, 156, 181, 248, 244, 218, 243, 153, 136, 80, 79, 113, 190, 240, 19, 162, 181, 214, 185, 197, 249, 0, 96, 65, 198, 25, 75, 127, 22, 104, 111, 36, 91, 44, 96, 207, 205, 172, 126, 70, 6, 210, 124, 89, 130, 109, 46, 89, 158, 95, 96, 18, 57, 106, 197, 34, 1, 71, 93, 200, 42, 76, 8, 48, 84, 84, 227, 211, 152, 226, 224, 122, 82, 3, 237, 18, 108, 49, 134, 174, 122, 17, 22, 199, 63, 206, 119, 177, 32, 181, 219, 190, 139, 163, 247, 145, 159, 184, 241, 246, 42, 255, 89, 50, 250, 18, 25, 28, 161, 6, 13, 108, 236, 57, 162, 236, 64, 194, 62, 29, 183, 164, 36, 215, 128, 57, 104, 178, 186, 13, 97, 129, 255, 54, 147, 73, 14, 100, 76, 79, 160, 197, 152, 11, 188, 78, 8, 27, 143, 143, 5, 71, 154, 42, 117, 181, 234, 15, 234, 110, 191, 178, 225, 198, 98, 102, 88, 132, 195, 157, 48, 216, 40, 165, 145, 7, 107, 156, 41, 29, 132, 62, 119, 177, 169, 229, 66, 186, 73, 10, 40, 117, 100, 50, 67, 223, 67, 137, 103, 92, 195, 199, 221, 134, 138, 39, 234, 252, 59, 62, 54, 27, 218, 246, 216, 193, 245, 167, 218, 47, 163, 74, 29, 155, 34, 243, 191, 184, 185, 143, 17, 78, 21, 28, 249, 110, 62, 35, 137, 98, 204, 39, 109, 110, 52, 115, 235, 81, 24, 194, 94, 175, 155, 0, 255, 206, 10, 131, 146, 134, 13, 120, 160, 132, 99, 41, 138, 56, 115, 92, 70, 25, 132, 137, 28, 54, 210, 19, 51, 77, 202, 57, 233, 110, 163, 155, 121, 225, 3, 1, 50, 47, 115, 47, 20, 186, 166, 108, 14, 213, 174, 248, 157, 23, 148, 61, 164, 110, 171, 165, 241, 83, 16, 99, 159, 1, 143, 54, 171, 179, 36, 177, 223, 177, 60, 56, 150, 250, 15, 44, 125, 50, 236, 225, 228, 71, 194, 18, 108, 126, 12, 82, 142, 131, 63, 9, 115 },
                            Email = "user@user.com",
                            EmailConfirmed = false,
                            FirstName = "Georgi",
                            Gender = 0,
                            IsActive = false,
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            NormalizedEmail = "user@user.com",
                            NormalizedUserName = "USER@USER.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEIycFtYZXOTmCSTAr/HlWMGA565HKaUIFA420fodAXZfoC1If9CbFdV7bRAqxgLVwA==",
                            PhoneNumber = "0888555666",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = new byte[] { 120, 106, 82, 75, 191, 40, 3, 249, 193, 46, 5, 79, 152, 50, 84, 82, 25, 201, 109, 73, 85, 208, 238, 180, 251, 115, 19, 45, 69, 239, 143, 192, 248, 99, 5, 11, 248, 196, 40, 39, 30, 49, 183, 172, 147, 22, 133, 174, 101, 9, 113, 24, 127, 32, 145, 121, 188, 194, 153, 187, 99, 26, 183, 78, 122, 86, 252, 65, 50, 65, 200, 117, 99, 232, 52, 222, 84, 67, 64, 54, 249, 34, 30, 212, 255, 62, 117, 253, 185, 182, 207, 1, 151, 17, 156, 91, 78, 207, 12, 118, 91, 226, 13, 189, 249, 98, 171, 122, 228, 110, 78, 123, 231, 4, 209, 232, 138, 103, 25, 57, 96, 166, 176, 122, 221, 147, 222, 237, 46, 73, 204, 70, 190, 148, 216, 171, 41, 5, 133, 169, 249, 51, 215, 224, 177, 182, 99, 51, 30, 36, 134, 53, 122, 137, 49, 58, 190, 112, 139, 157, 54, 52, 176, 201, 113, 139, 107, 11, 152, 228, 84, 219, 213, 230, 109, 186, 110, 68, 49, 98, 198, 205, 37, 116, 34, 41, 102, 128, 84, 174, 193, 148, 158, 205, 49, 94, 141, 12, 102, 2, 16, 76, 123, 55, 19, 225, 11, 64, 50, 87, 205, 65, 78, 125, 27, 21, 172, 4, 50, 124, 179, 67, 110, 163, 135, 237, 14, 93, 152, 168, 195, 175, 244, 6, 8, 237, 162, 14, 129, 205, 60, 176, 212, 151, 36, 97, 108, 229, 118, 134, 28, 125, 24, 97, 99, 118, 127, 198, 32, 231, 63, 137, 189, 24, 134, 45, 171, 197, 204, 77, 75, 101, 131, 245, 64, 50, 2, 5, 74, 202, 48, 37, 39, 123, 92, 85, 46, 86, 36, 192, 100, 141, 99, 238, 55, 80, 121, 64, 146, 234, 68, 229, 109, 104, 96, 212, 100, 205, 160, 222, 148, 245, 117, 241, 116, 96, 238, 203, 132, 122, 95, 98, 66, 193, 98, 133, 198, 169, 220, 212, 157, 25, 170, 166, 211, 201, 34, 124, 176, 238, 255, 152, 174, 156, 250, 37, 56, 75, 242, 33, 156, 199, 136, 190, 78, 234, 157, 253, 202, 68, 136, 56, 69, 119, 90, 183, 96, 40, 226, 68, 155, 195, 81, 145, 219, 135, 9, 24, 148, 84, 122, 155, 135, 10, 34, 140, 48, 42, 148, 179, 253, 253, 3, 185, 65, 53, 120, 112, 128, 191, 121, 63, 213, 123, 130, 100, 144, 7, 25, 30, 180, 89, 5, 230, 31, 86, 201, 36, 51, 202, 169, 47, 213, 61, 11, 103, 234, 39, 223, 245, 210, 253, 17, 200, 49, 40, 254, 239, 70, 154, 46, 10, 53, 215, 82, 142, 30, 155, 51, 23, 75, 88, 126, 124, 68, 208, 252, 150, 27, 190, 225, 9, 137, 143, 40, 41, 212, 213, 3, 128, 83, 78, 50, 59, 62, 238, 201, 196, 176, 151, 160, 38, 23, 235, 16, 64, 63, 111, 36, 63, 106, 193, 97, 0, 22, 86, 1, 75, 207, 112, 37, 116, 30, 181, 214, 165, 126, 199, 231, 210, 133, 196, 183, 161, 153, 143, 253, 14, 195, 37, 39, 235, 153, 25, 72, 162, 228, 71, 12, 237, 164, 210, 32, 242, 37, 223, 246, 184, 167, 41, 24, 144, 212, 224, 212, 165, 94, 171, 197, 157, 177, 164, 105, 203, 17, 140, 126, 13, 66, 115, 46, 37, 66, 124, 114, 14, 164, 230, 56, 239, 156, 53, 208, 72, 10, 58, 165, 24, 66, 59, 80, 232, 38, 128, 15, 45, 195, 127, 201, 35, 221, 32, 211, 92, 124, 189, 165, 30, 40, 95, 114, 114, 89, 79, 142, 205, 126, 62, 90, 152, 67, 181, 172, 191, 196, 16, 146, 24, 230, 117, 241, 93, 72, 167, 37, 23, 84, 16, 105, 82, 148, 27, 39, 30, 71, 25, 212, 143, 39, 181, 114, 49, 56, 186, 106, 196, 123, 141, 203, 149, 148, 40, 58, 234, 54, 129, 152, 221, 91, 71, 157, 203, 82, 243, 138, 54, 20, 137, 220, 228, 157, 74, 153, 127, 97, 145, 174, 233, 15, 145, 171, 111, 49, 224, 226, 178, 16, 16, 70, 129, 154, 198, 92, 221, 135, 77, 233, 118, 169, 226, 39, 34, 103, 95, 183, 100, 83, 78, 165, 199, 223, 147, 70, 107, 166, 56, 133, 89, 248, 83, 134, 136, 90, 116, 54, 194, 83, 222, 155, 214, 76, 192, 41, 45, 52, 150, 38, 118, 27, 39, 76, 219, 65, 255, 246, 199, 220, 226, 174, 110, 82, 204, 182, 29, 10, 171, 205, 136, 116, 128, 226, 40, 59, 174, 65, 92, 123, 108, 64, 135, 40, 82, 151, 139, 39, 72, 155, 7, 10, 166, 55, 152, 1, 15, 76, 138, 16, 213, 61, 184, 171, 75, 2, 2, 3, 156, 168, 168, 88, 171, 102, 37, 167, 1, 117, 82, 214, 83, 226, 193, 122, 83, 95, 39, 47, 53, 135, 164, 41, 79, 34, 18, 169, 112, 7, 180, 61, 233, 70, 230, 254, 231, 34, 79, 70, 111, 206, 45, 7, 69, 238, 141, 72, 60, 150, 220, 59, 235, 150, 130, 250, 12, 203, 75, 89, 113, 91, 22, 236, 157, 59, 53, 222, 166, 105, 135, 218, 1, 108, 214, 210, 86, 16, 8, 72, 0, 96, 223, 180, 175, 43, 152, 161, 195, 146, 154, 127, 113, 218, 34, 169, 205, 109, 194, 177, 66, 98, 4, 211, 244, 193, 207, 44, 124, 107, 116, 168, 65, 12, 10, 212, 248, 158, 146, 183, 129, 245, 85, 239, 59, 227, 107, 211, 14, 230, 98, 7, 244, 185, 24, 4, 236, 247, 202, 56, 33, 168, 182, 173, 186, 218, 221, 218, 203, 213, 108, 124, 2, 172, 108, 245, 158, 123, 99, 98, 221, 253, 21, 222, 56, 14, 111, 148, 193, 146, 117, 0, 112, 177, 220, 224, 116, 58, 215, 125, 179, 88, 156, 74, 99, 158, 81, 105, 104, 118, 174, 31, 145, 32, 152, 207, 195, 103, 39, 102, 161, 153, 117, 20, 210, 241, 72, 188, 40, 134, 254, 160, 80, 85, 176, 129, 214, 160, 159, 109, 79, 138, 129, 219, 254, 37, 107, 0, 164 },
                            Relationship = 1,
                            SecurityStamp = "9c4f02ae-4f84-4acb-93ff-dd995539f7c6",
                            StateId = 1,
                            TwoFactorEnabled = false,
                            UserName = "user@user.com"
                        },
                        new
                        {
                            Id = new Guid("949a14ed-2e82-4f5a-a684-a9c7e3ccb52e"),
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2007, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "515a311c-e50d-4f5e-ae9d-ed9e6d2cc786",
                            CountryId = 1,
                            CoverPhoto = new byte[] { 12, 133, 55, 98, 45, 0, 165, 212, 90, 164, 9, 38, 103, 61, 243, 115, 85, 69, 163, 214, 66, 240, 121, 6, 242, 0, 201, 199, 219, 11, 125, 111, 31, 4, 12, 132, 13, 19, 171, 80, 162, 241, 198, 32, 235, 226, 172, 73, 12, 1, 115, 82, 188, 16, 179, 202, 241, 220, 231, 189, 214, 52, 89, 235, 150, 217, 188, 155, 6, 59, 42, 150, 42, 236, 245, 205, 105, 231, 86, 253, 83, 23, 192, 249, 243, 123, 207, 161, 137, 178, 8, 198, 97, 199, 238, 220, 227, 34, 44, 74, 209, 216, 200, 214, 90, 83, 125, 164, 113, 244, 54, 227, 105, 81, 186, 65, 118, 191, 222, 46, 183, 240, 22, 200, 226, 255, 70, 224, 127, 232, 144, 25, 158, 238, 120, 124, 99, 178, 252, 148, 123, 107, 68, 184, 111, 227, 32, 52, 203, 189, 24, 110, 79, 15, 163, 69, 144, 149, 42, 141, 104, 124, 64, 230, 41, 216, 154, 210, 149, 11, 39, 104, 121, 13, 180, 52, 255, 127, 76, 188, 136, 114, 212, 108, 13, 234, 34, 174, 12, 110, 26, 206, 228, 254, 250, 249, 166, 110, 112, 111, 106, 44, 185, 45, 76, 80, 55, 140, 72, 121, 22, 176, 39, 230, 200, 147, 123, 151, 1, 30, 218, 31, 16, 160, 99, 106, 207, 133, 27, 40, 157, 62, 168, 135, 153, 165, 193, 18, 241, 45, 22, 12, 75, 101, 14, 7, 178, 164, 128, 155, 235, 239, 59, 113, 129, 164, 188, 42, 205, 164, 119, 98, 204, 221, 172, 169, 214, 1, 34, 224, 64, 81, 90, 224, 215, 40, 30, 3, 236, 185, 168, 120, 39, 160, 154, 98, 251, 245, 222, 1, 47, 12, 112, 181, 47, 91, 48, 122, 102, 95, 110, 96, 39, 173, 193, 8, 113, 98, 229, 74, 35, 139, 197, 105, 228, 140, 109, 117, 153, 165, 45, 15, 156, 92, 246, 119, 146, 254, 27, 235, 104, 120, 227, 120, 14, 90, 222, 234, 168, 85, 66, 169, 214, 59, 45, 210, 113, 49, 200, 24, 165, 79, 26, 181, 126, 196, 68, 244, 167, 70, 115, 113, 0, 229, 21, 165, 80, 28, 166, 8, 36, 92, 197, 126, 225, 16, 195, 62, 208, 44, 94, 244, 156, 31, 120, 31, 159, 100, 25, 17, 154, 158, 126, 119, 120, 230, 38, 19, 220, 132, 152, 30, 36, 46, 86, 15, 182, 116, 90, 67, 93, 199, 79, 77, 10, 166, 185, 72, 62, 198, 188, 118, 47, 192, 72, 90, 130, 21, 236, 190, 203, 101, 103, 24, 166, 194, 116, 129, 46, 185, 218, 78, 103, 248, 141, 177, 167, 57, 92, 157, 51, 32, 167, 78, 240, 4, 45, 152, 124, 168, 99, 233, 48, 37, 4, 12, 97, 92, 201, 88, 5, 158, 61, 158, 175, 11, 73, 151, 251, 197, 3, 50, 58, 37, 72, 222, 179, 78, 136, 137, 43, 204, 35, 95, 212, 127, 19, 167, 119, 41, 225, 185, 100, 218, 81, 122, 78, 160, 70, 50, 38, 247, 164, 5, 136, 207, 242, 47, 37, 133, 92, 216, 20, 193, 88, 44, 147, 37, 37, 156, 78, 20, 182, 46, 238, 148, 101, 83, 89, 169, 106, 135, 208, 120, 134, 154, 38, 143, 135, 224, 236, 74, 105, 229, 193, 96, 43, 219, 198, 204, 247, 85, 72, 119, 166, 103, 57, 183, 192, 92, 194, 239, 143, 212, 225, 83, 232, 170, 246, 151, 37, 14, 192, 109, 168, 177, 157, 59, 18, 136, 69, 49, 25, 233, 222, 11, 189, 70, 20, 82, 116, 104, 169, 9, 203, 124, 228, 150, 150, 72, 141, 241, 104, 210, 106, 120, 214, 238, 42, 63, 189, 61, 114, 251, 134, 52, 26, 105, 188, 170, 185, 47, 2, 210, 238, 45, 246, 80, 252, 58, 255, 178, 185, 158, 80, 223, 5, 23, 34, 89, 83, 156, 62, 21, 219, 164, 55, 132, 13, 5, 94, 127, 184, 82, 46, 130, 226, 201, 140, 109, 31, 182, 147, 65, 165, 195, 67, 73, 78, 71, 19, 247, 120, 29, 18, 218, 20, 204, 198, 32, 65, 12, 148, 197, 244, 207, 87, 134, 47, 37, 127, 60, 213, 249, 211, 69, 95, 112, 126, 64, 198, 187, 132, 119, 247, 181, 155, 20, 244, 1, 214, 240, 95, 97, 110, 216, 50, 202, 122, 247, 242, 124, 84, 180, 181, 62, 37, 34, 71, 248, 209, 114, 153, 164, 211, 77, 126, 240, 222, 247, 94, 47, 9, 220, 115, 214, 108, 93, 178, 60, 38, 60, 197, 50, 246, 236, 115, 92, 141, 149, 114, 146, 248, 39, 1, 161, 238, 228, 182, 47, 235, 84, 90, 88, 23, 223, 1, 169, 57, 228, 127, 242, 21, 248, 226, 222, 239, 161, 85, 20, 216, 218, 210, 43, 183, 181, 186, 74, 25, 195, 48, 96, 65, 13, 85, 87, 111, 255, 180, 165, 232, 166, 90, 176, 2, 64, 63, 97, 167, 75, 160, 146, 161, 232, 255, 73, 98, 85, 112, 107, 53, 146, 173, 22, 107, 241, 249, 29, 246, 199, 101, 9, 28, 244, 165, 119, 81, 151, 143, 132, 111, 243, 151, 97, 61, 60, 244, 42, 134, 76, 51, 242, 24, 47, 32, 164, 45, 227, 240, 22, 109, 220, 86, 246, 194, 64, 160, 46, 150, 97, 154, 7, 158, 126, 171, 12, 222, 162, 253, 40, 20, 95, 191, 23, 99, 171, 167, 100, 148, 254, 40, 113, 181, 119, 157, 112, 11, 107, 103, 244, 178, 245, 23, 33, 244, 240, 233, 15, 168, 90, 127, 245, 69, 217, 224, 0, 227, 101, 206, 240, 151, 48, 5, 13, 192, 172, 197, 160, 97, 154, 38, 23, 7, 61, 44, 83, 76, 159, 148, 188, 1, 94, 81, 245, 168, 115, 225, 147, 139, 228, 247, 187, 154, 184, 236, 103, 205, 75, 53, 59, 18, 248, 154, 43, 244, 187, 223, 187, 48, 112, 219, 85, 64, 48, 141, 235, 29, 233, 187, 206, 96, 51, 189, 85, 219, 46, 126, 203, 244, 9, 138, 31, 208, 47, 230, 97, 5, 175, 224, 238, 48, 15, 212, 252, 72, 36, 200, 39, 164, 172, 56, 13, 238, 174, 192, 159, 71, 228, 227, 72, 93, 164, 2, 169, 60, 96, 190, 226, 90, 128, 42, 125, 103, 255, 14, 26, 42, 236, 50, 62, 95, 105, 83, 214, 184, 56, 34, 90, 18, 185, 52, 187, 194, 27, 145, 56, 51, 199, 174, 203, 216, 185, 98, 212, 186, 145, 214, 16, 77, 48, 54, 157, 164, 174, 170, 121, 243, 106, 166, 134, 217, 89, 195, 34, 212, 62, 237, 56, 2, 0, 139, 183, 232, 28, 116, 43, 20, 243, 80, 31, 116, 232, 181, 100, 186, 102, 31, 138, 30, 78, 67, 178, 114, 83, 218, 101, 219, 121, 180, 155, 112, 26, 191, 200, 6, 190, 157, 56, 222, 118, 78, 158, 210, 198, 65, 1, 87, 54, 10, 182, 114, 88, 91, 22, 200, 39, 84, 114, 107, 79, 72, 65, 214, 78, 41, 36, 126, 57, 133, 245, 135, 20, 51, 208, 226, 207, 3, 120, 224, 248, 245, 212, 34, 187, 50, 225, 0, 9, 9, 139, 156, 14, 177, 15, 244, 178, 184, 233, 20, 123, 199, 108, 178, 249, 191, 246, 89, 130, 172, 234, 153, 185, 81, 105, 139, 86, 57, 50, 57, 127, 145, 233, 214, 119, 16, 73, 255, 0, 249, 47, 71, 158, 250, 150, 59, 59, 102, 5, 212, 230, 43, 135, 195, 79, 244, 89, 175, 75, 117, 134, 51, 239, 80, 180, 17, 191, 233, 251, 225, 104, 159, 71, 152, 181, 48, 118, 54, 132, 117, 9, 155, 145, 182, 208, 119, 130, 200, 7, 8, 8, 58, 24, 174, 27, 78, 35, 200, 198, 44, 188, 222, 133, 240, 136, 99, 104, 70, 100, 158, 114, 2, 38, 117, 184, 96, 249, 218, 39, 223, 147, 95, 49, 147, 202, 25, 8, 37, 171, 82, 153, 70, 52, 120, 65, 209, 150, 152, 241, 64, 202, 34, 48, 47, 200, 98, 144, 166, 141, 2, 156, 248, 231, 93, 215, 37, 63, 170, 214, 65, 31, 151, 228, 127, 2, 4, 2, 232, 109, 253, 204, 3, 213, 39, 114, 4, 246, 34, 210, 113, 107, 51, 20, 142, 230, 97, 235, 248, 15, 138, 117, 60, 228, 8, 213, 20, 184, 233, 236, 118, 244, 219, 15, 21, 254, 135, 125, 150, 109, 242, 234, 151, 98, 211, 154, 114, 109, 174, 129, 118, 219, 95, 97, 146, 199, 140, 72, 72, 69, 76, 171, 79, 215, 221, 167, 75, 186, 64, 78, 50, 166, 150, 146, 161, 122, 34, 218, 20, 195, 20, 105, 180, 44, 106, 141, 141, 232, 235, 47, 146, 199, 229, 14, 118, 24, 136, 51, 139, 68, 20, 146, 43, 161, 2, 212, 94, 56, 7, 52, 4, 42, 175, 3, 198, 11, 202, 205, 96, 5, 230, 242, 169, 27, 46, 120, 105, 80, 93, 51, 107, 151, 255, 179, 97, 138, 133, 217, 66, 247, 231, 151, 118, 189, 245, 129, 14, 202, 181, 68, 58, 64, 156, 245, 232, 35, 170, 224, 234, 137, 47, 104, 135, 165, 164, 2, 227, 253, 23, 204, 188, 131, 181, 94, 27, 110, 149, 255, 3, 2, 185, 34, 220, 143, 165, 33, 212, 117, 229, 248, 133, 217, 20, 155, 123, 28, 1, 21, 159, 140, 146, 4, 52, 100, 26, 173, 232, 5, 27, 56, 116, 67, 243, 236, 169, 137, 139, 17, 103, 48, 94, 73, 137, 201, 58, 190, 250, 160, 245, 196, 157, 21, 96, 247, 106, 245, 4, 233, 157, 212, 28, 196, 106, 105, 140, 115, 74, 220, 58, 80, 154, 229, 16, 57, 35, 93, 5, 74, 179, 253, 175, 255, 95, 57, 156, 181, 140, 75, 214, 182, 24, 133, 147, 120, 179, 25, 62, 235, 246, 147, 56, 85, 206, 132, 113, 194, 34, 181, 198, 157, 234, 156, 192, 179, 32, 20, 175, 216, 38, 210, 116, 125, 73, 137, 139, 133, 30, 84, 86, 53, 111, 192, 38, 131, 86, 244, 39, 216, 66, 5, 239, 87, 210, 33, 241, 241, 169, 11, 194, 53, 206, 102, 232, 214, 81, 10, 136, 36, 75, 135, 122, 152, 21, 110, 77, 117, 66, 232, 232, 152, 244, 252, 219, 105, 76, 10, 239, 163, 96, 250, 60, 72, 125, 222, 122, 28, 186, 96, 39, 187, 239, 80, 162, 90, 58, 83, 146, 111, 216, 185, 203, 110, 205, 181, 174, 171, 208, 221, 99, 182, 73, 223, 51, 136, 41, 146, 64, 144, 87, 77, 126, 209, 118, 39, 173, 159, 119, 166, 105, 227, 125, 145, 202, 240, 200, 70, 157, 85, 103, 121, 248, 155, 246, 120, 64, 177, 171, 155, 11, 238, 91, 93, 69, 195, 114, 123, 11, 18, 237, 145, 52, 251, 246, 5, 58, 157, 202, 167, 36, 152, 254, 11, 99, 80, 140, 193, 177, 14, 10, 28, 137, 155, 231, 138, 97, 64, 29, 201, 195, 75, 228, 244, 182, 60, 10, 223, 1, 216, 233, 116, 131, 90, 6, 80, 23, 220, 254, 4, 133, 101, 232, 175, 132, 214, 55, 43, 123, 40, 254, 243, 65, 162, 163, 114, 18, 181, 21, 247, 70, 74, 23, 167, 40, 73, 172, 175, 85, 54, 160, 33, 32, 104, 240, 79, 33, 111, 6, 94, 70, 26, 21, 103, 29, 170, 209, 235, 3, 237, 111, 139, 251, 57, 71, 232, 189, 3, 203, 79, 205, 135, 186, 16, 174, 237, 1, 119, 183, 33, 200, 115, 70, 211, 137, 44, 154, 31, 172, 199, 99, 34, 36, 119, 89, 209, 61, 141, 175, 62, 165, 207, 188, 180, 87, 42, 249, 253, 208, 86, 62, 42, 158, 84, 224, 219, 153, 168, 69, 169, 154, 105, 170, 149, 95, 208, 57, 62, 164, 24, 117, 190, 214, 178, 186, 90, 130, 252, 230, 86, 88, 78, 18, 74, 236, 117, 192, 161, 28, 205, 18, 243, 138, 152, 4, 221, 112, 126, 135, 112, 77, 112, 221, 246, 70, 138, 228, 200, 27, 85, 212, 190, 254, 104, 224, 123, 18, 59, 55, 197, 114, 123, 144, 224, 120, 136, 4, 239, 163, 220, 195, 13, 221, 23, 48, 164, 74, 94, 51, 106, 3, 192 },
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            Gender = 0,
                            IsActive = false,
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.com",
                            NormalizedUserName = "ADMIN@ADMIN.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEMP44Q0qrPLoVVb8s/L3pmIAIwSS2bQoze2pUvL6Spfsyx8nyzwrGkEB+YPx5eNEhg==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = new byte[] { 230, 142, 184, 101, 166, 203, 152, 117, 226, 115, 165, 219, 38, 16, 79, 61, 114, 139, 204, 155, 215, 149, 215, 19, 127, 137, 237, 194, 151, 42, 79, 25, 158, 158, 71, 116, 121, 88, 77, 252, 9, 250, 180, 64, 98, 109, 149, 11, 213, 0, 163, 36, 254, 252, 253, 66, 5, 102, 100, 233, 91, 51, 80, 71, 22, 65, 141, 162, 115, 187, 159, 59, 119, 217, 52, 236, 129, 111, 122, 97, 234, 23, 122, 27, 70, 200, 165, 221, 110, 214, 12, 95, 15, 171, 92, 247, 249, 231, 171, 82, 172, 81, 72, 89, 158, 152, 26, 197, 45, 144, 84, 101, 80, 123, 23, 198, 243, 179, 65, 7, 214, 8, 214, 186, 210, 47, 134, 28, 87, 192, 64, 140, 81, 97, 244, 65, 186, 106, 52, 157, 152, 60, 133, 185, 232, 87, 120, 220, 225, 44, 38, 238, 239, 2, 102, 96, 243, 224, 57, 111, 49, 164, 87, 92, 196, 43, 52, 113, 85, 185, 70, 122, 184, 60, 251, 47, 57, 176, 202, 185, 53, 3, 226, 56, 173, 114, 26, 7, 28, 115, 142, 66, 76, 225, 18, 210, 192, 233, 60, 171, 47, 160, 242, 196, 104, 168, 32, 104, 55, 237, 58, 95, 112, 111, 203, 73, 145, 122, 146, 192, 218, 200, 6, 61, 112, 27, 241, 162, 138, 172, 181, 238, 175, 177, 169, 156, 235, 204, 89, 93, 110, 68, 102, 223, 189, 5, 96, 54, 233, 199, 57, 57, 47, 151, 215, 57, 15, 29, 192, 31, 117, 177, 71, 103, 32, 99, 195, 92, 73, 1, 44, 31, 179, 58, 245, 138, 170, 227, 67, 244, 74, 104, 251, 170, 15, 204, 217, 120, 207, 1, 63, 33, 167, 20, 232, 216, 248, 97, 243, 3, 210, 238, 51, 26, 65, 68, 120, 146, 143, 113, 171, 100, 235, 155, 9, 148, 111, 159, 166, 232, 183, 109, 193, 130, 79, 177, 123, 161, 123, 71, 199, 88, 6, 67, 47, 214, 48, 197, 245, 31, 247, 6, 235, 119, 141, 56, 124, 104, 238, 200, 134, 238, 244, 54, 175, 144, 79, 140, 73, 158, 237, 3, 15, 63, 81, 183, 97, 90, 119, 75, 101, 247, 11, 208, 74, 38, 124, 84, 121, 27, 195, 203, 16, 222, 38, 199, 238, 107, 22, 177, 5, 75, 110, 137, 81, 135, 89, 53, 12, 48, 88, 137, 136, 191, 136, 94, 160, 72, 121, 114, 121, 191, 88, 167, 255, 139, 248, 138, 32, 212, 188, 89, 233, 192, 121, 152, 133, 120, 73, 184, 213, 191, 111, 167, 253, 156, 229, 48, 18, 86, 38, 96, 179, 50, 98, 246, 219, 25, 161, 206, 39, 92, 33, 81, 202, 180, 47, 73, 38, 74, 3, 230, 76, 83, 14, 29, 208, 53, 228, 130, 246, 37, 159, 126, 63, 31, 211, 4, 162, 152, 216, 7, 53, 249, 212, 181, 88, 179, 108, 71, 84, 166, 218, 40, 86, 111, 119, 163, 164, 104, 13, 38, 255, 195, 19, 169, 242, 213, 87, 183, 190, 202, 248, 16, 254, 28, 2, 245, 20, 184, 228, 238, 56, 26, 43, 32, 246, 216, 239, 7, 243, 235, 244, 195, 30, 181, 64, 105, 253, 126, 55, 141, 97, 29, 237, 106, 11, 220, 131, 200, 63, 203, 5, 162, 63, 167, 75, 112, 130, 109, 58, 145, 167, 253, 22, 169, 25, 185, 44, 103, 170, 67, 116, 122, 247, 49, 149, 44, 35, 9, 248, 204, 214, 244, 184, 124, 40, 6, 225, 252, 216, 199, 230, 49, 102, 100, 109, 227, 87, 83, 234, 110, 152, 241, 144, 159, 131, 209, 155, 19, 72, 129, 55, 128, 188, 134, 69, 62, 117, 230, 213, 160, 105, 120, 162, 174, 198, 21, 116, 213, 158, 24, 225, 107, 217, 127, 230, 172, 116, 46, 20, 97, 44, 122, 91, 149, 54, 93, 228, 20, 139, 31, 64, 8, 145, 94, 103, 235, 62, 135, 129, 134, 30, 200, 148, 77, 177, 103, 70, 6, 233, 131, 24, 107, 26, 44, 150, 28, 203, 122, 112, 81, 236, 217, 238, 180, 148, 248, 235, 190, 234, 107, 254, 196, 191, 22, 59, 193, 69, 111, 119, 216, 165, 215, 177, 67, 235, 166, 57, 51, 32, 30, 69, 221, 49, 123, 41, 1, 250, 58, 58, 241, 83, 1, 186, 72, 188, 96, 6, 110, 102, 32, 225, 250, 227, 84, 146, 231, 75, 32, 73, 175, 121, 127, 84, 42, 153, 180, 148, 134, 216, 180, 85, 225, 198, 1, 198, 148, 116, 137, 43, 42, 227, 160, 69, 92, 104, 42, 240, 148, 26, 255, 180, 1, 231, 180, 62, 127, 80, 170, 178, 77, 110, 224, 231, 95, 142, 118, 164, 137, 219, 179, 67, 114, 205, 112, 86, 179, 143, 86, 226, 158, 20, 161, 129, 126, 60, 231, 108, 63, 51, 34, 91, 163, 166, 144, 131, 102, 150, 227, 191, 131, 185, 10, 248, 151, 108, 116, 72, 150, 86, 224, 86, 127, 74, 142, 57, 230, 196, 25, 35, 51, 227, 233, 3, 68, 96, 75, 150, 74, 35, 112, 132, 214, 42, 150, 88, 244, 201, 27, 131, 52, 98, 133, 153, 109, 26, 204, 165, 207, 67, 89, 57, 254, 191, 203, 250, 112, 85, 226, 72, 215, 47, 19, 78, 198, 108, 139, 184, 232, 232, 88, 226, 136, 114, 217, 216, 248, 40, 178, 22, 6, 86, 125, 114, 19, 119, 5, 208, 248, 48, 30, 222, 7, 84, 190, 239, 50, 201, 37, 216, 31, 166, 79, 108, 238, 170, 138, 170, 211, 64, 233, 132, 41, 109, 15, 169, 86, 255, 17, 46, 100, 14, 96, 2, 63, 39, 209, 69, 83, 56, 242, 52, 215, 180, 229, 64, 202, 190, 191, 126, 3, 155, 196, 22, 163, 38, 61, 74, 47, 0, 76, 65, 236, 15, 234, 33, 112, 6, 253, 66, 10, 190, 72, 211, 147, 120, 122, 220, 27, 45, 224, 152, 252, 108, 222, 16, 83, 70, 99, 191, 65, 24, 17, 91, 25, 205, 104, 111, 228, 182, 96, 119, 27, 255, 255, 194, 180, 176, 229, 64, 1, 24, 117 },
                            Relationship = 0,
                            SecurityStamp = "cfb5501d-596e-4bd5-b3e0-763e303fe980",
                            StateId = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "BULGARIA"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ENGLAND"
                        },
                        new
                        {
                            Id = 3,
                            Name = "USA"
                        },
                        new
                        {
                            Id = 4,
                            Name = "RUSSIA"
                        },
                        new
                        {
                            Id = 5,
                            Name = "JAPAN"
                        });
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("DataFile")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PublicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.HasIndex("UserId");

                    b.ToTable("MediaFiles");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Publication.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PublicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Publication.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PublicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Publication.Publication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastCommented")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LatestActivity")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Publications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dcc559d9-f166-4098-aff3-b66750695b6f"),
                            AuthorId = new Guid("949a14ed-2e82-4f5a-a684-a9c7e3ccb52e"),
                            Content = "This is the first seeded publication Content from Ivan",
                            DateCreated = new DateTime(2023, 12, 6, 9, 11, 1, 804, DateTimeKind.Utc).AddTicks(1670),
                            LatestActivity = new DateTime(2023, 12, 6, 9, 11, 1, 804, DateTimeKind.Utc).AddTicks(1673)
                        },
                        new
                        {
                            Id = new Guid("beda20b5-171d-4ce5-8df0-c93d6a7c5fab"),
                            AuthorId = new Guid("6d5800ce-d726-4fc8-83d9-d6b3ac1f591e"),
                            Content = "This is the second seeded publication Content from Georgi",
                            DateCreated = new DateTime(2023, 12, 6, 9, 11, 1, 804, DateTimeKind.Utc).AddTicks(1709),
                            LatestActivity = new DateTime(2023, 12, 6, 9, 11, 1, 804, DateTimeKind.Utc).AddTicks(1710)
                        });
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Publication.Share", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PublicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.HasIndex("UserId");

                    b.ToTable("Shares");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ivan Vazov",
                            StateId = 1
                        });
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Varna"
                        });
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.UserSchool", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SchoolId");

                    b.HasIndex("SchoolId");

                    b.ToTable("UserSchools");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", null)
                        .WithMany("Friends")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("AI_Social_Platform.Data.Models.Country", "Country")
                        .WithMany("UsersInThisCountry")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AI_Social_Platform.Data.Models.State", "State")
                        .WithMany("UsersInThisState")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Media", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.Publication.Publication", "Publication")
                        .WithMany("MediaFiles")
                        .HasForeignKey("PublicationId");

                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publication");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Publication.Comment", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.Publication.Publication", "Publication")
                        .WithMany("Comments")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Publication");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Publication.Like", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.Publication.Publication", "Publication")
                        .WithMany("Likes")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Publication");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Publication.Publication", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", "Author")
                        .WithMany("Publications")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Publication.Share", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.Publication.Publication", "Publication")
                        .WithMany("Shares")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", "User")
                        .WithMany("Shares")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Publication");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.School", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.UserSchool", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.School", "School")
                        .WithMany("UserSchools")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", "User")
                        .WithMany("UserSchools")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Friends");

                    b.Navigation("Likes");

                    b.Navigation("Publications");

                    b.Navigation("Shares");

                    b.Navigation("UserSchools");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Country", b =>
                {
                    b.Navigation("UsersInThisCountry");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Publication.Publication", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("MediaFiles");

                    b.Navigation("Shares");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.School", b =>
                {
                    b.Navigation("UserSchools");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.State", b =>
                {
                    b.Navigation("UsersInThisState");
                });
#pragma warning restore 612, 618
        }
    }
}
